%% This exercise uses fake neurons to test the effectivemess of cross-correlation
% measures for assessing functional connectivity.

%% Generate a stimulus

tlength = 15000;            % The stimulus last 15 seconds at 1kHz sampling rate
stim = randn(1,tlength);    % It is gaussian WN


%% Let's create some fake data for two independent cells that respond to our
% stimulus 

% The first cell has an exponential filter with a 20 ms time constant
th=1:100;
h1 = exp(-th./25);
resp1 = conv(stim,h1,'same');

% The second cell has an exponential filter with a 30 ms time constant
h2 = exp(-th./30);
resp2 = conv(stim, h2, 'same');


% Threshold and set stimulus driven rms to 14 spikes/s and
% background to 1 spike/s
resp1(resp1<0) = 0.0;
resp2(resp2<0) = 0.0;
resp1 = resp1.*((0.014)./std(resp1));
resp2 = resp2.*((0.014)./std(resp2));  
resp1 = resp1 + 0.001;   % Background rate set at 1 spike/s
resp2 = resp2 +0.001;

% Exercise 1. Plot the average responses (resp1 and resp2) of the two cells 
% for the first 200 points.
figure(1);
plot(resp1(1:200),'r');
hold on;
plot(resp2(1:200), 'b');
xlabel('Time ms');
ylabel('Firing Rate (spikes/ms)');
hold off;


%% Now we're going to generate poisson spikes from these responses.
% We are first going to generate independent spike trials
meanfr = 15;   % poisson_gen assumes that the resp is a profile and will threhold it and adjust it to meanfr
numTrials = 10;
spiketimes1 = poisson_gen_spikes(resp1, meanfr, numTrials);
spiketimes2 = poisson_gen_spikes(resp2, meanfr, numTrials);

% Generate a psth for these spike arrival times and compare to
% resp1 and resp2.
psth1 = zeros(1, length(resp1));
psth2 = zeros(1, length(resp2));

for i=1:numTrials
    trial = zeros(1, length(resp1));
    trial(spiketimes1{i}) = 1;
    psth1 = psth1 + trial;
    trial = zeros(1, length(resp1));
    trial(spiketimes2{i}) = 1;
    psth2 = psth2 + trial;
end

psth1 = psth1./numTrials;
psth2 = psth2./numTrials;

% Exercise 2.  On the same figure 1, plot the psth obtained from your two
% neurons and compare to theoretical rate.
figure(1);
hold on;
plot(psth1(1:200), 'r--');
plot(psth2(1:200), 'b--');
xlabel('Time (ms)');
ylabel('Spikes/ms');
hold off;

%% Calculate the cross-correlation.
maxlags = 100;
ccAll = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;

    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    ccAll = ccAll + xcorr(trial2, trial1, maxlags, 'Unbiased');
end

ccAll = ccAll./numTrials;

% Exercise 3 Plot the cross-correlation on figure 2. Add labels to the x
% and y axis.  What do you see?

figure(2);
plot(-maxlags:maxlags, ccAll);
xlabel('Time (ms)');
ylabel('(spikes/ms)^2');
title('Cross Correlation');

%% Exercise 4. Repeat this calculation after removing the mean firing rate and plot on
% figure 3. What has changed?

ccMeanAll = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    trial1 = trial1 - mean(psth1);

    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    trial2 = trial2 - mean(psth2);
    ccMeanAll = ccMeanAll + xcorr(trial2, trial1, maxlags, 'Unbiased');
end

ccMeanAll = ccMeanAll./numTrials;


figure(3);
plot(-maxlags:maxlags, ccMeanAll);
xlabel('Time (ms)');
ylabel('(Spikes/ms)^2');
title('Cross-Corr Mean Subtracted');
% We see that the correlation decays to zero at long delays but that we
% still have stimulus driven correlated activity. By the way this is what
% the matlab xcov command will do. We need to do more...

%% Exercise 5.  This time calculate the true cross-covariance by removing the
% time varying mean firing rate.  Repeat this calculation after removing the mean firing rate and plot on
% a new figure 4. Use the same y-scale as in figure 3. What do you observe?

ccovAll = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    trial1 = trial1 - psth1;

    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    trial2 = trial2 - psth2;
    ccovAll = ccovAll + xcorr(trial2, trial1, maxlags, 'Unbiased');
end

ccovAll = ccovAll./numTrials;


figure(4);
plot(-maxlags:maxlags, ccovAll);
xlabel('Time ms');
ylabel('(Spikes/ms)^2');
title('Cross-covariance');
axis([-maxlags maxlags -1e-4 7e-4]);

% Now we are left just with noise.  Note that you can also get the
% cross-covariance by subtracting the shuffled cross-correlation.

%% We are now going to model two connected neurons

% Neuron 1 increases the probability of firing in neuron 2.
th=1:25;
hspike = zeros(1,27);
hspike(3:27) = exp(-th./5);   % 2 ms delay and then exponential with 5 ms decay
hspike = hspike./sum(hspike);
w12 = 1;             % Connectivity weight: 1 is a one to one - one spike causes one spike


psth2 = zeros(1, length(resp2));
clear spiketimes2;

for i=1:numTrials
    trial = zeros(1, length(resp1));
    trial(spiketimes1{i}) = 1;
    resp2_trial = w12.*conv(trial,hspike,'full');
    resp2_tot = resp2 + resp2_trial(1:length(resp2));
    spiketimes2(i) = poisson_gen_spikes(resp2_tot, meanfr, 1);
    trial = zeros(1, length(resp1));
    trial(spiketimes2{i}) = 1;
    psth2 = psth2 + trial;
end
psth2 = psth2./numTrials;

% Let's plot pairs of spike trains in the first 1000 ms.
figure(5);
for i = 1:numTrials
    subplot(numTrials, 1, i);
    hold on;
    nspikes1 = length(spiketimes1{i});
    for is=1:nspikes1
        t1 = spiketimes1{i}(is);
        if t1 > 1000
            break;
        end
        plot([t1 t1], [0 1], 'k');
    end
    nspikes2 = length(spiketimes2{i});
    for is=1:nspikes2
        t2 = spiketimes2{i}(is);
        if t2 > 1000
            break;
        end
        plot([t2 t2], [0 1], 'r');
    end
    axis([0 1000 0 1]);
    axis off;
    hold off;
end

%% Exercise 6. Calculate and plot the cross correlation and cross-covariance 
% on the same new figure (figure 6)

ccAll = zeros(1, 2*maxlags+1);
ccovAll = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    
    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    ccAll = ccAll + xcorr(trial2, trial1, maxlags, 'Unbiased');
    
    trial1 = trial1 - psth1;
    trial2 = trial2 - psth2;
    ccovAll = ccovAll + xcorr(trial2, trial1, maxlags, 'Unbiased');
end

ccovAll = ccovAll./numTrials;
ccAll = ccAll./numTrials;


figure(6);
plot(-maxlags:maxlags, ccAll, 'r');
hold on;
plot(-maxlags:maxlags, ccovAll, 'k', 'LineWidth',2);
xlabel('Time (ms)');
ylabel('(Spikes/ms)^2');
hold off;
% This looks nice but it has units of spike/s square...

%% Exercise 7. You are going to normalize the cross-covariance to obtain 
% the cross-cohenrency.  To do so you will divide by the auto-correlation
% of each spike train in the Fourier Domain.
% Plot the auto-covariance on figure 7 and the coherency on figure 8.

% Calculate the auto-correlations (time varying mean subtracted)
ccov1 = zeros(1, 2*maxlags+1);
ccov2 = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    
    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;

    trial1 = trial1 - psth1;
    trial2 = trial2 - psth2;
    
    ccov1 = ccov1 + xcorr(trial1, maxlags, 'Unbiased');    
    ccov2 = ccov2 + xcorr(trial2, maxlags, 'Unbiased');
end

ccov1 = ccov1./numTrials;
ccov2 = ccov2./numTrials;

figure(7);
subplot(1,2,1);
plot(-maxlags:maxlags, ccov1);
xlabel('Time (ms)');
ylabel('Auto-covariance (spikes/ms)^2');
title('Neuron 1');
subplot(1,2,2);
plot(-maxlags:maxlags, ccov2);
xlabel('Time (ms)');
ylabel('Auto-covariance (spikes/ms)^2');
title('Neuron 2');

% In this case the auto-covariance is not very interesting: because we  
% are dealing with Poisson neurons,the auto-covariance are delta functions

% Normalizing
fcovAll = fft(ccovAll);
fccov1 = fft(ccov1);
fccov2 = fft(ccov2);
fcoh = fcovAll./sqrt(abs(fccov1).*abs(fccov2));
coh = ifft(fcoh);

figure(8);
plot(-maxlags:maxlags, coh);
xlabel('Time (ms)');
ylabel('Coherency');

%% Now we are going to make neuron 2 a burster by simply adding spikes after
% each of the current spikes in a little gaussian pulse.

th=1:25;
hburst = zeros(1,40);
hburst = exp((th-20).^2./10^2);   % A gaussian pulse
hburst = hburst./sum(hburst);
w22 = 1;  % One will double the firing rate
psth2 = zeros(1, length(resp2));

for i=1:numTrials
    trial = zeros(1, length(resp1));
    trial(spiketimes2{i}) = 1;
    resp2_trial = conv(trial,hburst,'full');
    spiketimes2_added(i) = poisson_gen_spikes(resp2_trial, w22*meanfr, 1);
    trial = zeros(1, length(resp1));
    trial(spiketimes2{i}) = 1;
    trial(spiketimes2_added{i}) = 1;
    psth2 = psth2 + trial(1:length(resp2));
end
psth2 = psth2./numTrials;

% Let's plot pairs of spike trains in the first 1000 ms.
figure(9);
for i = 1:numTrials
    subplot(numTrials, 1, i);
    
    nspikes1 = length(spiketimes1{i});
    for is=1:nspikes1
        t1 = spiketimes1{i}(is);
        if t1 > 1000
            break;
        end
        plot([t1 t1], [0 1], 'k');
        hold on;
    end
    nspikes2 = length(spiketimes2{i});
    for is=1:nspikes2
        t2 = spiketimes2{i}(is);
        if t2 > 1000
            break;
        end
        plot([t2 t2], [0 1], 'r');
        hold on;
    end
    nspikes2 = length(spiketimes2_added{i});
    for is=1:nspikes2
        t2 = spiketimes2_added{i}(is);
        if t2 > 1000
            break;
        end
        plot([t2 t2], [0 1], 'g');
        hold on;
    end
    axis([0 1000 0 1]);
    axis off;
    hold off;
end

%% Exercise 8.  Repeat exercise 5 and exercise 6 for this new scenario:
% Calculate the cross-correlation, cross-covariance, auto-covariance and 
% cross-coherency. Plot on new figures as in 5 and 6 but give variables
% a different name so that you can also compare the cross-covariance and
% the cross-coherence on a final summary figure

ccAllB = zeros(1, 2*maxlags+1);
ccovAllB = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    
    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    trial2(spiketimes2_added{i}) = 1;
    ccAllB = ccAllB + xcorr(trial2, trial1, maxlags, 'Unbiased');
    
    trial1 = trial1 - psth1;
    trial2 = trial2 - psth2;
    ccovAllB = ccovAllB + xcorr(trial2, trial1, maxlags, 'Unbiased');
end

ccovAllB = ccovAllB./numTrials;
ccAllB = ccAllB./numTrials;


figure(10);
plot(-maxlags:maxlags, ccAllB, 'r');
hold on;
plot(-maxlags:maxlags, ccovAllB, 'k', 'LineWidth',2);
xlabel('Time (ms)');
ylabel('(Spikes/ms)^2');
hold off;
% This looks nice but it has units of spike/s square...


% Calculate the auto-correlations (time varying mean subtracted)
ccov1 = zeros(1, 2*maxlags+1);
ccov2 = zeros(1, 2*maxlags+1);

for i=1:numTrials
    trial1 = zeros(1, length(resp1));
    trial1(spiketimes1{i}) = 1;
    
    trial2 = zeros(1, length(resp1));
    trial2(spiketimes2{i}) = 1;
    trial2(spiketimes2_added{i}) = 1;
    
    trial1 = trial1 - psth1;
    trial2 = trial2 - psth2;
    
    ccov1 = ccov1 + xcorr(trial1, maxlags, 'Unbiased');    
    ccov2 = ccov2 + xcorr(trial2, maxlags, 'Unbiased');
end

ccov1 = ccov1./numTrials;
ccov2 = ccov2./numTrials;

figure(11);
subplot(1,2,1);
plot(-maxlags:maxlags, ccov1);
xlabel('Time (ms)');
ylabel('Auto-covariance (spikes/ms)^2');
title('Neuron 1');
subplot(1,2,2);
plot(-maxlags:maxlags, ccov2);
xlabel('Time (ms)');
ylabel('Auto-covariance (spikes/ms)^2');
title('Neuron 2');

% We can now see the effect of the bursting propreties of cell 2 in the
% auto-covariance function.

% Calculating the cross-coherency
fcovAllB = fft(ccovAllB);
fccov1 = fft(ccov1);
fccov2 = fft(ccov2);
fcohB = fcovAllB./sqrt(abs(fccov1).*abs(fccov2));
cohB = ifft(fcohB);

figure(12);
plot(-maxlags:maxlags, cohB);
xlabel('Time (ms)');
ylabel('Coherency');

figure(13);
subplot(1,2,1);
plot(-maxlags:maxlags, ccovAllB, 'k');
hold on;
plot(-maxlags:maxlags, ccovAll, 'k--');
legend('Burster', 'Non Burster');
xlabel('Time (ms)');
ylabel('(Spikes/ms)^2');
title('Cross-covariance');
hold off;

subplot(1,2,2);
plot(-maxlags:maxlags, cohB, 'k');
hold on;
plot(-maxlags:maxlags, coh, 'k--');
legend('Burster', 'Non Burster');
xlabel('Time (ms)');
title('Coherency');
hold off;

%% Calculate the conditional entropy difference without dynamics.

% Let's calculate histograms of cross-isi
hist12 = zeros(200,1);     
hist21 = zeros(200,1);

for i=1:numTrials
    spikes1 = spiketimes1{i};
    spikes2 = spiketimes2{i};
    for s1=1:length(spikes1);
        t1 = spikes1(s1);
        ind1 = find(spikes1>t1, 1, 'first');
        ind2 = find(spikes2>t1, 1, 'first');
        if ~isempty(ind1)
            t1next = spikes1(ind1);
        else
            t1next = inf;
        end
        if ~isempty(ind2)
            t2next = spikes2(ind2);
        else
            t2next = inf;
        end
        if (t2next < t1next)
            df = round(t2next - t1);
            if (df > 0 && df <= 200)
                hist12(df) = hist12(df) + 1;
            end
        end
    end
    for s2=1:length(spikes2);
        t2 = spikes2(s2);
        ind1 = find(spikes1>t2, 1, 'first');
        ind2 = find(spikes2>t2, 1, 'first');
        if ~isempty(ind1)
            t1next = spikes1(ind1);
        else
            t1next = inf;
        end
        if ~isempty(ind2)
            t2next = spikes2(ind2);
        else
            t2next = inf;
        end
        if (t1next < t2next)
            df = round(t1next - t2);
            if (df > 0 && df <= 200)
                hist21(df) = hist21(df) + 1;
            end
        end
    end
end

hist12 = hist12./sum(hist12);
hist21 = hist21./sum(hist21);

% Convolve to get rid of edge effects zeros
hv = hann(6);
hv = hv./sum(hv);
hist12 = conv(hist12, hv);
hist21 = conv(hist21, hv);

histen12 = hist12;
histen12(find(hist12 ==0)) = 1;
histen21 = hist21;
histen21(find(hist21 ==0)) = 1;
ent12 = -sum(histen12.*log2(histen12));
ent21 = -sum(histen21.*log2(histen21));

figure(14);
plot(hist12,'b');
hold on;
plot(hist21,'r');
ylabel('Probability');
xlabel('ISI Time (ms)');
legend('1-2', '2-1');
hold off;
title(sprintf('Ent1->2 = %f Ent2->1 = %f CED = %f',ent12, ent21, ent12-ent21));





